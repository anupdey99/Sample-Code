

import com.a2i.apps.sangsadiotracker.BuildConfig
import com.a2i.apps.sangsadiotracker.utils.AppConstant
import com.google.gson.GsonBuilder
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

/**
 * Factory instance to keep our Retrofit instance.
 */
object RetrofitFactory {

    val instance: Retrofit

    init {
        // Set your desired log level. Use Level.BODY for debugging errors.
        // adding a Gson converter with
        // leniency to make parsing the results simple.

        val builder = OkHttpClient.Builder()
        if (BuildConfig.DEBUG) {
            val httpLoggingInterceptor = HttpLoggingInterceptor()
            val logging =
                httpLoggingInterceptor.apply {
                    httpLoggingInterceptor.level = HttpLoggingInterceptor.Level.BODY
                }
            builder.addInterceptor(logging)
        }
        builder.addInterceptor(AuthInterceptor())
        //builder.cache(Cache(context.getCacheDir(),  10 * 1024 * 1024 )) // 10 MB
        val httpClient = builder.build()

        val gson = GsonBuilder()
            .setLenient()
            .create()
        instance = Retrofit.Builder()
            .addConverterFactory(GsonConverterFactory.create(gson))
            .baseUrl(AppConstant.BASE_URL)
            .client(httpClient)
            .build()
    }
}
